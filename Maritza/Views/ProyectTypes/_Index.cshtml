@model PagedList.StaticPagedList<dtoProyectTypes>
@using PagedList.Mvc;
@{
    var filters = ViewBag.Filter as MaritzaData.Filters.fltProyectTypes;
}



<div id="ModelList">
    <div class="table-responsive">
        <table class="table table-striped ">
            <thead>
                <tr>
                    <th>
                        @Html.ActionLink("ID", "Index", new { SortingOrder = filters.ProyectTypeID_Sort, ProyectID = filters.ProyectTypeID, Name = filters.Name}, htmlAttributes: new { })
                    </th>
                    <th>
                        @Html.ActionLink("Nombre", "Index", new { SortingOrder = filters.Name_Sort, ProyectID = filters.ProyectTypeID, Name = filters.Name }, htmlAttributes: new { })
                    </th>
                </tr>
            </thead>
            <tbody>

                @if (Model.Count == 0)
                {
                    <tr>
                        <td colspan="5">
                            Sin registros
                        </td>
                    </tr>
                }
                else
                {
                    foreach (var element in Model)
                    {
                        <tr>
                            <td>@Html.DisplayFor(elementItem => element.ProyectTypeID)</td>
                            <td>@Html.DisplayFor(elementItem => element.Name)</td>
                            <td>
                                <a href="@Url.Action("Details", new {@id=element.ProyectTypeID})" class="text-decoration-none">Detalles</a>
                                |
                                <a href="@Url.Action("Edit", new {@id=element.ProyectTypeID})" class="text-decoration-none">Editar</a>

                            </td>
                        </tr>
                    }
                }
            </tbody>
            <tfoot>
                <tr>
                    <td colspan="5">
                        <div id="ModelList" class="" data-otf-target="#ModelList">
                            @{
                                var vPagedlistRenderOptions = PagedListRenderOptions.EnableUnobtrusiveAjaxReplacing(PagedListRenderOptions.ClassicPlusFirstAndLast,
                                               new AjaxOptions()
                                               {
                                                   HttpMethod = "GET",
                                                   UpdateTargetId = "ModelList",
                                                   OnBegin = "ShowLoading()",
                                                   OnComplete = "HideLoading()"
                                               });
                                vPagedlistRenderOptions.LiElementClasses = new[] { "page-item" };
                                vPagedlistRenderOptions.UlElementClasses = new[] { "pagination" };
                            }
                            @Html.PagedListPager(Model, page => Url.Action("Index",
                           new
                           {
                               PageNumber = page,
                               ProyectTypeID = filters.ProyectTypeID,
                               Title = filters.Name,
                               SortingOrder = filters.SortingOrder
                           }), vPagedlistRenderOptions)
                        </div>
                    </td>
                </tr>
            </tfoot>
        </table>
    </div>
</div>
