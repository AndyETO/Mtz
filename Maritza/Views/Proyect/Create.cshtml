@model tblProyects
@{
    ViewBag.Title = "Create";
}

@using (Html.BeginForm(null, null, FormMethod.Post, new { @id = "frm", @enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken();
    @Html.ValidationSummary();
    <div class="container pt-5 mt-5 mb-5">

        <div class="card mt-5">

            <div class="card-body mt-5 ">

                <div class="row ">
                    <div class="col-4 p-1">
                        @Html.LabelFor(model => model.Title, new { @class = "form-label fw-bold" })
                        @Html.TextBoxFor(model => model.Title, new { @class = "form-control", @placeholder = "Titulo" })
                        @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-4 p-4 mt-2">
                        @Html.CheckBoxFor(model => model.IsFrontPage, new { @class = "form-check-input p-3", @Value = "true" })
                        @Html.LabelFor(model => model.IsFrontPage, new { @class = "form-label fw-bold mt-2 " })
                        @*@Html.ValidationMessageFor(model => model.Comment, "", new { @class = "text-danger" })*@
                    </div>
                    <div class="col-12 p-1">

                        @Html.LabelFor(model => model.Comment, new { @class = "form-label fw-bold" })
                        @Html.TextAreaFor(model => model.Comment, new { @class = "form-control w-100", @placeholder = "Comentario", @style = "max-width: inherit;resize:none", @rows = "3" })
                        @Html.ValidationMessageFor(model => model.Comment, "", new { @class = "text-danger" })
                    </div>

                    <div class="col-12 p-1">
                        @Html.LabelFor(model => model.Description, new { @class = "form-label fw-bold" })
                        @Html.TextAreaFor(model => model.Description, new { @class = "form-control w-100", @placeholder = "Descripción", @style = "max-width: inherit;resize:none", @rows = "5" })
                        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-12 p-1">
                        @Html.LabelFor(model => model.Image, new { @class = "form-label fw-bold" })
                        @Html.TextBoxFor(model => model.ImageBase, new { @Type = "File", @class = "form-control w-100 input-images", @style = "max-width: inherit", @accept = "image/*", @index = "1" })
                        @Html.ValidationMessageFor(model => model.ImageBase, "", new { @class = "text-danger" })
                    </div>
                    <div id="ContainerCropper" class="col-12 p-1" style="display:none;">
                        <div id="cropperContainer" class="cropper-container" style="min-height:20vh;max-height:50vh;">
                            <!--Layout cropper-->
                            <img src="" class="cropper-image" id="croppedImage" name="croppedImage" />
                        </div>
                        <div id="display-btn-cropper">
                            <!--Cropper btn-->
                        </div>
                    </div>
                    <div class="col-12 p-1 img-display-content" style="display:none;">
                        <!--Cropper js img-->
                        <img id="Img-display-1" src="" height="500" width="500" />
                    </div>
                </div>
            </div>
            <div class="card-footer">
                <div class="row pt-2">
                    <div class="col-2">
                        <a class="btn btn-secondary w-100" href="@Url.Action("Index")">Regresar</a>
                    </div>
                    <div class="col-2 offset-8">
                        <input class="btn btn-success w-100" type="submit" value="Guardar" />
                    </div>
                </div>

            </div>
        </div>

    </div>

}

@section scripts{
    <link href="@Url.Content("~/Content/cropper.css")" rel="stylesheet" />
    <script src="@Url.Content("~/Scripts/Cropper/cropper.js")"></script>
    <script type="text/javascript">
        var cropper = null;
        var croppedImages = []
        $(".input-images").on("change", function () {
            var Files = Array.from(this.files);
            var id = $(this).attr("index")
            showNextImageInCropper(Files, id);
        });
        function showNextImageInCropper(Files, inputSelected) {
            if (Files && Files.length > 0) {
                showImageInCropper(Files, inputSelected);
            }
        }
        function showImageInCropper(Files, inputSelected) {
            var reader = new FileReader();
            reader.onload = function (e) {
                $('.cropper-image').attr('src', e.target.result);
                $('#ContainerCropper').show();
                initializeCropper(inputSelected);
            };
            reader.readAsDataURL(Files[0]);
        }
        function initializeCropper(inputSelected) {
            if (cropper) {
                cropper.destroy();
            }
            cropper = new Cropper(document.querySelector('#croppedImage'), {
                dragMode: 'move',
                aspectRatio: 16 / 9,
                autoCropArea: 0.80,
                restore: false,
                guides: false,
                center: true,
                highlight: false,
                cropBoxMovable: false,
                cropBoxResizable: false,
                toggleDragModeOnDblclick: false,
                ready: function () {
                    //alert
                },
                crop: function (event) {
                    var canvas = cropper.getCroppedCanvas(); 
                    var croppedImageData = canvas.toDataURL('image/png'); 
                    $('#recortarBtn').remove();
                    var cutterBtn = $(
                        '<button type="button" class="btn btn-primary btn-sm" id="recortarBtn">Cortar</button>'
                    );
                    cutterBtn.on('click', function () {
                        cropImage(inputSelected);  
                    });
                    $('#display-btn-cropper').append(cutterBtn);
                }
            });

            return cropper;
        }

        function cropImage(inputSelected) {
            var canvas = cropper.getCroppedCanvas();
            var croppedImageData = canvas.toDataURL('image/png');
            croppedImages.push(croppedImageData);
            cropper.clear();
            $('#ContainerCropper').hide();
            showCroppedImageThumbnails(inputSelected);
        }
        function showCroppedImageThumbnails(inputSelected) {
            var thumbnailsContainer = $('#croppedThumbnails');
            thumbnailsContainer.empty();

            if (croppedImages && croppedImages.length > 0) {
                croppedImages.forEach(function (croppedImageData, index) {
                    $("#Img-display-" + inputSelected).attr('src', croppedImageData);
                    $(".img-display-content").show();
                    $("#ImageBase").val(croppedImageData);
                });
            }
        }
    </script>

}


